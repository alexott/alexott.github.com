#title Работа с Git
#keywords emacs, git

<contents>

Появление и популярность системы контроля версий *Git* связана с разработкой операционной
системы *Linux*.  Первоначально данная система разрабатывалась для обеспечения работы над
ядром операционной системы, но затем она стала применяться и в других проектах с открытым
исходным кодом. Поскольку над такими проектами работают люди из разных точек земного шара,
то и сама система контроля версий имеет идеологию, позволяющую работу в децентрализованной
среде[1].

Поддержка *Git* может осуществляться несколькими способами -- используя модули для пакетов
*VC* и *DVC*, а также используя пакеты *git.el* или *emacs-git*.  В первом случае работа
производится через стандартные интерфейсы пакетов *VC* и *DVC*, в то время как пакеты *git.el* и
*emacs-git* реализуют интерфейсы, позволяющие использовать все возможности *Git*.  Далее в
статье речь пойдет тименно об этих пакетах.

* Пакет git.el

** Установка пакета

Установка *git.el* очень проста -- он идет в составе дистрибутива *Git* и находится в
подкаталоге =contrib/emacs/=.  Для компиляции пакета достаточно выполнить команду =make=,
которая также может использоваться для установки пакета (по умолчанию, пакет ставится в
каталог =$HOME/share/emacs/site-lisp=, но вы можете изменить это значение передав параметр
=emacslispdir= команде =make= или просто скопировать нужные файлы в каталог, где Emacs сможет
найти их).

Для использования пакета *git.el*, вам нужно поместить в ваш файл инициализации следующую
команду:

<src lang="emacs-lisp">
(require 'git)
</src>

после выполнения которой вам станут доступны все команды пакета.

** Работа с пакетом git.el

Использование пакета всегда начинается с выполнения команды =git-status=, которая запросит у
вас имя каталога в котором необходимо искать дерево *Git*, и выполнит анализ состояния этого
дерева.  После анализа, будет открыт буфер с именем =*git-status*=, в котором можно будет
выполнять действия с файлами проекта.  Пример вывода в буфера вы можете видеть на рисунке
ниже (в нижней части рисунка вы можете видеть вывод команды =diff=).  Для данного буфера
определен специальный режим -- =git-status-mode=, для которого определенно некоторое
количество команд (и соответствующих им комбинаций клавиш, многие из которых совпадают с
аналогичными клавишами режима *PCL-CVS*, что облегчает переход на использование *Git*).  Все
команды работают только в данном буфере и не могут использоваться вне его.
    
<div id="screenshot">
[[../../../common/writings/emacs-vcs/git-status.png]]
</div>
     
Навигация по списку файлов, отображаемому после выполнения команды =git-status= может
осуществляться как с помощью клавиш курсора, так и с помощью команд =git-next-file= (клавиши
=n= и =SPC=) и =git-prev-file= (клавиша =p=).  Для большинства команд можно задать числовой
аргумент, который позволит изменить поведение команды.  Числовой аргумент вводится путем
набора цифр, а затем вызова нужной команды.  Вы также можете использовать отрицательные
аргументы, добавив знак минус перед набираемыми цифрами.

По умолчанию, все команды выполняются над файлом, на котором стоит курсор, но также
существуют команды для отметки нескольких файлов, над которыми могут выполняться операции.
Сюда можно отнести следущие команды и комбинации клавиш: клавиша =m= (команда =git-mark-file=)
отмечает один файл и перемещает курсор вниз, а с помощью клавиши =M= (команда =git-mark-all=)
вы можете отметить все файлы.  Для снятия пометки с одного файла вы можете использовать
клавиши =u= (=git-unmark-file=) или =DEL= (=git-unmark-file-up=), только стоит отметить, что
первая команда перемещает курсор вниз, а вторая -- вверх.  Для снятия пометок со всех
файлов вы можете использовать команду =git-unmark-all= (сочетание клавиш =M-DEL=).  Для
инверсии пометок можно использовать команду =git-toggle-all-marks= (клавиша =T=).

Практически также как и в *PCL-CVS*, открыть текущий файл можно с помощью команды
=git-find-file= (клавиша =RET= или =f=).  Открыть файл для просмотра можно с помощью клавиши =v=
(команда =git-view-file=).  В том случае, если при слиянии версий в файле возникли
конфликты, то вы можете вызвать команду разрешения конфликтов -- =git-resolve-file= (клавиша
=R=).

Добавление новых файлов в проект осуществляется с помощью команды =git-add-file= (клавиша
=a=), а удаление -- командой =git-remove-file= (клавиша =r=).  Для того, чтобы избавиться от
ненужных файлов, вы можете поместить их в список игнорируемых файлов с помощью команды
=git-ignore-file= (=i=).  Подтверждение изменений осуществляется с помощью команды
=git-commit-file= (клавиша =c=), а отмена изменений в отмеченных файлах -- с помощью команды
=git-revert-file= (=U=).  Сообщения, которые вводятся при подтверждении изменений, можно
просмотреть с помощью команды =git-log-file= (клавиша =l=).
    
Клавиша =d= является префиксом для команд, связанных с отображением изменений.  Самой важной
командой является команда =git-diff-file=, которую можно вызвать нажав <code>=</code> или
<code>d =</code>.  Команда =git-diff-file-base= (=d b=) позволяет выполнить поиск изменений
относительно базового файла.  Команда =git-diff-file-idiff= (=d e=) позволяет выполнить
интерактивный просмотр изменений в текущем файле. А команда =git-find-file-imerge= (=d E=),
позволяет открыть текущий файл в режиме интерактивного применения изменений.  Остальные
команды позволяют выполнить просмотр изменений относительно основной ветки --
=git-diff-file-merge-head= (=d h=), относительно версий файлов пользователя до слияния веток
-- =git-diff-file-mine= (=d m=), и т.п.  Полный список команд вы можете получить из справки.
    
К прочим командам можно отнести команды обновления статуса буфера =git-refresh-status=
(клавиша =g=), выхода из данного буфера используется команда =git-status-quit= (клавиша =q=),
удаления из списка обработанных файлов =git-remove-handled= (клавиша =x=) и получения справки
о работе в данном буфере -- =git-help= (клавиши =h= или =?=).

** Настройка пакета

Настройка пакета осуществляется с помощью стандартных средств настройки Emacs.  Группа
настройки называется =git= и позволяет задать и параметры *Git* и настройки начертаний,
используемых при отображении данных.

#git-emacs
* Пакет git-emacs

Пакет *git-emacs* во реализует примерно те же функции, что и пакет *git.el*, но имеет
некоторые улучшения, в основном в области пользовательского интерфейса.[1]
[[http://tsgates.cafe24.com/git/git-emacs.html][Домашняя страница]] проекта содержит достаточно подробный иллюстрированный мануал, так что
пользователь может быстро научиться пользоваться данным пакетом.

** Установка и настройка

Скачать пакет, и сопутствующие пакеты можно из [[http://github.com/tsgates/git-emacs/tree/master][репозитория разработчика]], и скачав,
поместите их в нужный каталог, и добавьте следующую команду в файл инициализации:

<src lang="emacs-lisp">
(require 'git-emacs)
</src>

Для настройки пакета используется несколько переменных, значение которых можно настроить
используя группу настройки с именем =git=.

** Основы работы с пакетом

Работа с пакетом начинается с выполнения команды =git-status=, выполнение которой создаст
буфер, в котором будут отображена информация о состоянии репозитория.  В данном буфере
действует специальный режим =git-status-mode= и определены команды для выполнения оперций
над файлами и репозиторием в целом.  Команды можно выполнять с помощью соответствующих
привязок клавиш или используя соответствующие пункты меню =Emacs-Git=, которое появляется
при включении данного режима.  

Перемещение по буферу производится помощью нескольких команд -- к традиционным =n=
(=git-next-file=) и =p= (=git-prev-file=), которые осуществляют переход к следующему или
предыдущему файлу, были добавлены команды =N= (=git-next-unmerged-file=) и =P=
(=git-prev-unmerged-file=), которые выполняют переход между файлами, в которых не выполнено
слияние изменений.

Также как и в других пакетах, пользователь может открыть нужный файл путем перемещения к
нему и нажатия =f= или =RET= (команда =git-find-file=).  Кроме того, пользователь может открыть
файл только для просмотра с помощью клавиши =v= (=git-view-file=), или открыть его в другом
окне с помощью =o= (=git-find-file-other-window=).

Операции могут выполняться как с отдельными файлами, так и с группами отмеченных файлов.
Установка пометки на конкретный файл может выполняться клавишей =m= (=git-mark-file=), а с
помощью клавиши =M= (=git-mark-all=) можно отметить сразу все файлы.  Для снятия пометки
определены следующие команды: клавиша =u= (=git-unmark-file=) снимает пометку с текущего файла
и перемещается к следующему, =DEL= (=git-unmark-file-up=) снимает пометку с предыдущего в
списке файла, а =M-DEL= (=git-unmark-all=) снимает пометку со всех файлов.  А с помощью
клавиши =T= (=git-toggle-all-marks=) можно инвертировать список отмеченных файлов, что иногда
очень удобно, если надо отметить большое количество файлов, при этом не выделяя только
несколько файлов.

m git--status-view-mark-and-next
SPC  git--status-view-toggle-and-next
u git--status-view-unmark-and-next

=*= git--status-view-mark-reg


n git--status-view-next-line
p git--status-view-prev-line
N git--status-view-next-meaningfull-line
P git--status-view-prev-meaningfull-line
< git--status-view-first-line
> git--status-view-last-line

e git--status-view-expand-tree-toggle
v git--status-view-view-file
o git--status-view-open-file

<code>=</code> git--status-view-diff-file
b git--status-view-switch-branch
! git--status-view-resolve-merge
. git--status-view-git-cmd

k git--status-view-gitk

a git--status-view-add
r git--status-view-rename
d git--status-view-rm

s git--status-view-summary

z git-branch

c git-commit-all

? git--status-view-blame
   
C-m git--status-view-do-propriate

g git--status-view-refresh
q git--status-view-quit


** Работа с файлами

Операции с файлами производятся с помощью нескольких команд.  Добавление и удаление файлов
производится командами =git-add-file= (клавиша =a=) и =git-remove-file= (клавиша =r=).  Откатить
изменения, сделанные в конкретном файле, можно с помощью клавиши =U= (=git-revert-file=), а в
том случае, если файл помечен, как содержащий конфликты, то изменить его статус можно с
помощью команды =git-resolve-file= (клавиша =R=).

i git--status-view-add-ignore


** Работа с изменениями

Подтверждение изменений в репозиторий производится с помощью команды =git-commit-file=
(клавиша =c=), выполнение которой открывает новый буфер, в котором пользователь может ввести
описание изменения, и завершить подтверждение путем нажатия сочетания клавиш =C-c C-c=.  


** История изменений




** Работка с ветками и тагами


** Прочие команды





#magit
* magit


http://zagadka.vm.bytemark.co.uk/magit/magit.html

** Установка и настройка

http://zagadka.vm.bytemark.co.uk/magit/

http://github.com/jwiegley/magit/tree/master

<src lang="emacs-lisp">
(autoload 'magit-status "magit" nil t)
</src>

** Использование пакета



* egg


* Вспомогательные пакеты

** git-blame

Данный пакет входит в состав пакета *git-emacs*, описанного [[#git-emacs][выше]].

** gitsum

** egit

This file contains an interface to git commands which are not
(currently) part of git.el. Primarily, this is a view of the git commit
history with the ability to mark ranges and/or single commits and
operate on them. Mutiple branches/tags/ref interfaces can be active at
the same time.

To install: put this file on the load-path and place the following in
your .emacs file:

<src lang="emacs-lisp">
(autoload 'egit "egit" "Emacs git history" t)
(autoload 'egit-file "egit" "Emacs git history file" t)
(autoload 'egit-dir "egit" "Emacs git history directory" t)
</src>

`M-x egit' shows commit history for a given branch, tag, or other
ref. You supply a directory (to identify the repo), the ref, and a
maximum number of commits to show.

`M-x egit-file' will show commits related to a specific file

`M-x egit-dir' will show commits related to files within a directory

egit is currently useful for browsing the history. It has only two
operations implemented (cherry-pick and revert) -- and those are
implemented only minimally. The framework for operating on a single or
multiple commits (that have been marked) already exists, so adding new
git commands should be relatively easy.

There isn't a way to specify a range of commits (unless you use the
marked commits to do so). There should probably be a dedicated method of
creating a range to pass to git commands. It might be good to have a
facility like qgit's in which user defined commands can be added
(although the default set should be fairly complete)

The "occur" feature needs something like himark to highlight the occur
regex in the comment buffer(s). There's a piece of code in there that
currently calls himark that's commented out. The idea is to "grep"
through comments. For example to highlight all cherry picked commits
search for "cherry", etc.

Start up time can be significant when 10s of thousands of commits are
being displayed. Unfortunately, this is not an unusual situtation. 

<div id="screenshot">
[[../../../common/writings/emacs-vcs/egit.png]]
</div>


<div id="rule">[[./index][На главную страницу]]</div>

Footnotes: 
[1] Хотя существует возможность использования данной системы и в централизованной среде

[2] Стоит отметить некоторые неудобства возникающие при использовании данного пакета --
    некоторые команды пересекаются с командами пакета *git.el*, так что использовать их
    одновременно не получится.  И во вторых, пакет принудительно включает глобальный режим
    *ido-mode*, что не всегда удобно для пользователей, использующих другие пакеты.

