#title Использование Leiningen для сборки кода на Clojure
#keywords leiningen, clojure, build tool, кложура

В данной заметке рассматривается использование утилиты Leiningen для сборки проектов,
написанных на Clojure.

<contents>

* Что это такое?

[[http://github.com/technomancy/leiningen][Leiningen]] -- утилита для сборки кода написанного на Clojure.  Leiningen намного проще по
сравнению с [[./ClojureMaven][Maven]], и позволяет описывать конфигурацию проекта и его зависимости используя
сам язык Clojure.  Leiningen использует внешние утилиты и библиотеки для работы с
зависимостями и сборки кода, поэтому он имеет достаточно небольшой размер исходного
кода. В последнее время эта система становится все более популярной -- она имеет
возможности расширения с помощью дополнительных модулей, например, для компиляции кода на
Java и т.п.

Из коробки Leiningen позволяет выполнять базовые задачи -- компиляцию кода, тестирование,
упаковку кода в jar-архив, сборку jar-архива со всеми зависимостями и т.д.  Кроме того,
имеется базовая поддержка работы с Maven, что позволяет использовать собранный код в
других проектах.

* Установка

Установка Leiningen на Unix-подобные ОС и на MS Windows немного различаются. Установка
Leiningen на Unix достаточно проста -- вам нужно скачать скрипт [[http://github.com/technomancy/leiningen/raw/stable/bin/lein][lein]].  После этого,
поместите скрипт в каталог, перечисленный в путях поиска программ, сделайте его
выполняемым, и выполните команду =lein self-install= для завершения процедуры установки.  В
процессе этой процедуры, Leiningen скачает и установит все компоненты, необходимые для его
работы.

Для установки на MS Windows необходимо сделать больше действий, поскольку автоматическая
установка пока не реализована. Вместо скрипта =lein= необходимо скачать скрипт [[http://github.com/technomancy/leiningen/raw/stable/bin/lein.bat][lein.bat]] и
поместить его в каталог, перечисленный в путях поиска программ =PATH=.  Скачайте
[[http://github.com/downloads/technomancy/leiningen/leiningen-1.1.0-standalone.jar][leiningen.jar]] и установите значение переменной среды =LEIN_JAR= в полный путь к этому файлу.
Также скачайте [[http://build.clojure.org/releases/org/clojure/clojure/1.1.0/clojure-1.1.0.jar][clojure.jar]] и установите значение переменной среды =CLOJURE_JAR= в полный
путь к этому файлу.  После этого вы можете начать использовать Leiningen.

* Начало работы и структура проекта

Для своей работы Leiningen предполагает использование проекта определенной структуры -- в
корне проекта должен находиться файл =project.clj=, который содержит определение проекта.
Единственной обязательной конструкцией является =defproject= -- макрос Clojure, который
раскрывается в набор инструкций по сборке.  =project.clj= также может содержать произвольный
код на Clojure, который будет выполнен в процессе сборки.

Исходный код должен находиться в каталоге =src=, а тесты -- в каталоге =test=.  Каталог =lib=
содержит библиотеки, нужные для работы проекта -- они копируются туда с помощью команды
=lein deps=, используя информацию о зависимостях, определенных в описании проекта.  В том
случае, если какая-то из библиотек отсутствует в репозиториях, то вы можете просто
скопировать ее в каталог =lib=, и она станет доступна при работе с проектом.  Однако
названия каталогов не являются неизменяемыми -- вы можете использовать опции =defproject=
для изменения этих значений, как это описано в разделе [[#conf][Конфигурация проекта]].

Самыс простым способом создать новый проект является использование команды =lein new=,
которая принимает один аргумент -- название проекра, и которая создаст новый каталог, чье
имя совпадает с именем проекта, и внутри него сгенерирует файл =project.clj= с зависимостями
от Clojure и =clojure-contrib=, файл =README= с описанием проекта, а также два каталога -- =src=
и =test= для исходного кода и тестов, соответственно.  После этого вы можете начать работать
с данным проектом.

** Пример проекта

Рассмотрим простой проект, описанный в файле =project.clj= следующим кодом (код для данного
проекта вы можете найти [[http://github.com/alexott/lein-simple-project/][тут]]):

<src lang="clojure">
(defproject test-project "1.0-SNAPSHOT"
  :description "A test project."
  :url "http://my-cool-project.com"
  :dependencies [[org.clojure/clojure "1.1.0"]
                 [org.clojure/clojure-contrib "1.1.0"]]
  :dev-dependencies [[leiningen/lein-swank "1.2.0-SNAPSHOT"]]
)
<src>

который определяет новый проект =test-project= с зависимостями от Clojure и набора библиотек
=clojure-contrib=, а также зависимостью, которая используется в процессе разработки --
=swank-clojure=.

В каталоге =src= находится один файл -- =simple.clj=, определяющий модуль =simple= и внутри
него, одну функцию следующего вида:

<src lang="clojure">
(ns simple)

(defn hello
  ([] "Hello world!")
  ([name] (str "Hello " name "!")))
</src>

В каталоге =test= находится файл =simple_test.clj=, содержащий тест для модуля =simple=.  Для
тестирования используется стандартный модуль =clojure.test=.  Исходный код теста выглядит
следующим образом:
<src lang="clojure">
(ns simple-test
  (:use clojure.test)
  (:use simple))

(deftest simple-test
  (is (= (hello) "Hello world!"))
  (is (= (hello "test") "Hello test!")))
</src>

Это полный проект для которого можно выполнять все команды поддерживаемые Leiningen.

** Задание зависимостей

Одной из важных и наиболее часто использумых частей =defproject= является определение
зависимостей от других библиотек, находящихся во внешних репозиториях.  Для проектов
написанных на Clojure это в первую очередь зависимость от самого языка, как это показано в
примере.

Различают разные виды зависимостей:  *dev-dependencies, etc.*

*Из чего состоит объявление одной зависимости*


Q: Is it possible to exclude indirect dependencies?
A: Yes. Some libraries, such as log4j, depend on projects that are not included in public repositories and unnecessary for basic functionality. Projects listed as :dependencies may exclude any of their dependencies by using the :exclusions key, as demonstrated here:

[log4j "1.2.15" :exclusions [javax.mail/mail
                             javax.jms/jms
                             com.sun.jdmk/jmxtools
                             com.sun.jmx/jmxri]]

 - http://github.com/swannodette/native-deps [[http://nakkaya.com/2010/04/05/managing-native-dependencies-with-leiningen/][description]]


** Репозитории

Once that succeeds it will be available for other projects to depend on. Leiningen adds
Clojars and the Clojure nightly build snapshots to the default repositories.

#conf
** Конфигурация проекта

 - :namespaces - a list of namespaces on which to perform AOT-compilation.
 - :main - specify a namespace to use as main for an executable jar.
 - :repositories - additional maven repositories to search for dependencies. Specify this as a map of repo IDs to URLs.
 - :source-path, :compile-path, :library-path, :test-path, :resources-path - alternate
   paths for src/, classes/, lib/, resources/, and test/ directories. 




* Команды

$ lein deps # install dependencies in lib/

$ lein test [TESTS] # run the tests in the TESTS namespaces, or all tests

$ lein compile # ahead-of-time compile into classes/

$ lein repl # launch a REPL with the project classpath configured

$ lein clean # remove all build artifacts

$ lein jar # create a jar of the project

$ lein uberjar # create a standalone jar that contains all dependencies

$ lein pom # output a pom.xml file for interop with Maven

$ lein install # install in local repository

$ lein help [TASK] # show a list of tasks or help for a given TASK

$ lein new NAME # generate a new project skeleton


* Выполнение кода

repl, swank, nailgun

repl - выполняется в скрипте, и использует rlwrap & jline

*написать про долнительные зависимости для swank, nailgun*

написать про то, какие каталоги выставляются в classpath

* Расширение функциональсноти Leiningen

 - [[http://nakkaya.com/2010/02/25/writing-leiningen-plugins-101/][как писать новые таски для lein]]
 - http://github.com/swannodette/native-deps [[http://nakkaya.com/2010/04/05/managing-native-dependencies-with-leiningen/][description]]


* Заключение


* TODO

 - упомянуть про polyglot-maven


;  LocalWords:  Leiningen
