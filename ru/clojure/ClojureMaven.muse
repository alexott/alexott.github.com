#title Использование Maven для сборки кода на Clojure
#keywords maven, clojure, build tool, кложура, мавен

В данной заметке рассматривается использование Maven для сборки проектов, написанных на
Clojure (и на смеси Clojure & Java).  

<contents>

* Что такое Maven?

[[http://maven.apache.org][Maven]] -- утилита для управления жизненным циклом ПО, реализующая разрешение зависимостей
(с автоматическим скачиванием их из репозиториев), сборку и тестирование кода, публикацию
собранного ПО и т.д.  Функциональность данной утилиты может расширяться с помощью
плагинов, что делает возможным ее применение не только для работы с кодом на Java, для
чего она в первую очередь и создавалась, но и дает возможность работы с кодом на других
языках.  Подробнее о Maven вы можете прочитать в [[http://www.sonatype.com/products/maven/documentation/book-defguide][следующих книгах]].

В отличии от утилиты Ant, которая описывает *как* выполнять сборку и тестирование кода,
Maven описывает *что* надо сделать в декларативном стиле, и все задачи выполняются
соответствующими плагинами.

Все описание жизненного цикла и информация о проекте хранится в файле =pom.xml=, который
находится в корневом каталоге проекта (и в каталогах подпроектов, если проект состоит из
нескольких частей).  К информации о проекте относятся имя и идентификатор проекта, его
версия, и достаточно часто -- информация о сайте проекта, репозитории с исходным кодом
(тогда можно использовать цель =mvn scm:update= для обновления исходного кода, и т.п.) и
многое другое.

Project Object Model (POM) определяет набор стадий жизненного цикла проекта (lifecycle
phases).  К каждой из стадий привязывается несколько задач (goals), которые определяют что
будет выполнено в данной стадии жизненного цикла.  К общим фазам относятся компиляция
(compile), тестирование (test), упаковка (package) и установка (install).  Каждая из
стадий имеет набор зависимостей от стадий, которые должны быть выполнены до ее запуска
(компиляция должна быть выполнена до тестирование, тестирование до упаковки и т.д.).

Обычно разработчик использует имена стадий для запуска процесса сборки, например, =mvn
package= или =mvn install=, и т.д.  Но кроме этого, разработчик может явно выполнить
конкретную задачу (goal) используя Maven.  Для этого он должен указать имя плагина,
который реализует эту задачу, и название задачи, например, =mvn clojure:run= запустит
интерпретатор Clojure.  Стоит отметить, что список задач, запускаемых в рамках какой-то
стадии жизненного цикла, не является фиксированным, а может изменяться путем конфигурации
плагина. Пример такой конфигурации вы увидите в следующем разделе.

* Maven и Clojure

Поддержка Clojure в Maven реализуется с помощью [[http://github.com/talios/clojure-maven-plugin][clojure-maven-plugin]], который находится в
центральном репозитории Maven, и поэтому сразу доступен для использования.  В качестве
основы для новых проектов вы можете использовать =pom.xml= из проекта [[http://github.com/talios/clojure-maven-example][clojure-maven-example]].

Если у вас уже создан файл =pom.xml= для вашего проекта, то для подключения плагина вам
необходимо добавить следующий код в =pom.xml= в раздел =<plugins>=:

<src lang="sgml">
  <plugin>
    <groupId>com.theoryinpractise</groupId>
    <artifactId>clojure-maven-plugin</artifactId>
    <version>1.3.2</version>
  </plugin>
</src>

*Внимание:* номер версии может меняться по мере продвижения разработки.  Для того, чтобы
узнать последнюю версию данного плагина обратитесь к сайту [[http://mvnrepository.com/artifact/com.theoryinpractise/clojure-maven-plugin][mvnrepository]], который содержит
информацию о пакетах, зарегистрированных в центральном репозитории Maven.

Подключение данного плагина даст вам возможность компиляции, тестирования и запуска кода
на Clojure, однако для этого вам придется использовать явные имена задач (goals), такие
как =clojure:compile=, =clojure:test= & =clojure:run=.  Однако вы можете упростить себе жизнь
путем добавления этих задач в список задач, выполняемых для каждой из стадий жизненного
цикла (=compile= и =test=, соответственно).  Для этого, необходимо добавить раздел
=<executions>= в описание плагина, например, вот так:

<src lang="sgml">
 <plugin>
   <groupId>com.theoryinpractise</groupId>
   <artifactId>clojure-maven-plugin</artifactId>
   <version>1.3.2</version>
   <executions>
     <execution>
       <id>compile</id>
       <phase>compile</phase>
       <goals>
         <goal>compile</goal>
       </goals>
     </execution>
     <execution>
       <id>test</id>
       <phase>test</phase>
       <goals>
         <goal>test</goal>
       </goals>
     </execution>        
   </executions>
 </plugin>
</src>

В этом случае исходные коды на Clojure будут откомпилированы, что иногда полезно -- при
использовании =gen-class= или если вы не хотите поставлять исходные коды.  Но иногда лучше
просто упаковать исходные коды в архив, и они будут откомпилированы при загрузке пакета.
Это позволяет избежать несовместимости, если ваш пакет будет использоваться с разными
версиями Clojure.  Для того, чтобы поместить исходные тексты в архив, вам необходимо
добавить следующий код в раздел =resources=

<src lang="sgml">
 <resource>
   <directory>src/main/clojure</directory>
 </resource>
</src>

По умолчанию исходные коды на Clojure помещаются в каталог =src/main/clojure=, с
подкаталогами, отражающими структуру вашей программы.  А исходные тексты для тестов
помещаются в каталог =src/test/clojure=.  Эти, и другие значения по умолчанию могут быть
изменены путем конфигурации плагина, как это описано ниже, в разделе [[#configure][Конфигурация плагина]].

** Задачи определенные в =clojure-maven-plugin=

clojure-maven-plugin реализует несколько задач, реализующих разную функциональность.  Их
можно разбить на 2 группы:

 - Задачи обрабатывающие исходный код (обычно связываются с соответствующими фазами
   жизненного цикла):
  =clojure:compile= :: реализует компиляцию исходного кода, написанного на Clojure;
  =clojure:test= :: выполняет тесты, написанные на Clojure, при запуске остальных тестов,
    определенных в проекте.

 - Задачи, связанные с выполнением кода проекта:
  =clojure:repl= :: Starts an interactive clojure REPL right on the command line. An
   initialisation script can be specified in the pom using the replScript configuration
   element.  тут упомянуть про jline
  =clojure:run= :: Runs a clojure script specified in the pom using the =<script>= and/or
   =<scripts>= configuration element.
  =clojure:swank= :: Starts a Swank server that accepts connections on port 4005 (can be
   changed using the `-Dclojure.swank.port=X`option). You can connect to this server from
   emacs with `M-x slime-connect`.
  =clojure:nailgun= :: Starts a nailgun server that accepts connections on port 2113 (can be
   changed using the `-Dclojure.nailgun.port=X`option). You can connect to this server
   from vim using [[http://kotka.de/projects/clojure/vimclojure.html][vimclojure]].

** Репозитории, относящиеся к Clojure

Имеется несколько репозиториев, которые имеют отношение к Clojure.  В первую очередь это
http://build.clojure.org/releases/, содержащий релизы Clojure и =clojure-contrib=, и
http://build.clojure.org/snapshots/, содержащий промежуточные версии.  Вторым популярным
репозиторием является [[http://clojars.org][Clojars]], который используется сообществом разработчиком Clojure для
публикации своих проектов.

Для подключения этих репозиториев необходимо добавить следующие строки в секцию
=repositories= в =pom.xml=:

<src lang="sgml">
 <repository>
   <id>clojure-releases</id>
   <url>http://build.clojure.org/releases</url>
 </repository>
 <repository>
   <id>clojars</id>
   <url>http://clojars.org/repo/</url>
 </repository>
</src>

В данном примере подключается репозиторий с релизами Clojure, так что если вы хотите
отслеживать прогресс в разработке языка, то вы должны изменить адрес на
http://build.clojure.org/snapshots/ в первом объявлении.

** Зависимости

*Тут написать про зависимости в maven, зависимости для clojure & clojure-contrib*

<src lang="sgml">
 <dependency>
   <groupId>org.clojure</groupId>
   <artifactId>clojure</artifactId>
   <version>1.1.0</version>
 </dependency>
 <dependency>
   <groupId>org.clojure</groupId>
   <artifactId>clojure-contrib</artifactId>
   <version>1.1.0</version>
 </dependency>
</src>


Для выполнения некоторых задач, перечисленных ниже, может понадобиться указать
дополнительные зависимости:
 - если вы будете использовать =clojure:swank=, то вам надо указать зависимость от пакета
  =swank-clojure=:
<src lang="sgml">
 <dependency>
  <groupId>swank-clojure</groupId>
  <artifactId>swank-clojure</artifactId>
  <version>1.2.0-SNAPSHOT</version>
</dependency>
</src>
 - если вы планируете использовать =clojure:nailgun=, то вам необходимо скачать дистрибутив
   с сайта [[http://kotka.de/projects/clojure/vimclojure.html][vimclojure]], собрать его как описано в документации и установить в свой
   локальный репозиторий Maven.  И после этого, вы можете добавить зависимость от
   =vimclojure= с помощью следующих строк:
<src lang="sgml">
 <dependency>
  <groupId>de.kotka</groupId>
  <artifactId>vimclojure</artifactId>
  <version>X.X.X</version>
 </dependency>
</src>
 - Наличие библиотеки JLine не обязательно, но полезно если вы будете работать в REPL --
   эта библиотека реализует историю команд, редактирование введенного текста и т.п.
   Наличие этой библиотеки определяется автоматически при запуске команды =mvn
   clojure:repl=, поэтому ее можно добавить в список зависимостей с помощью следующего
   кода:
<src lang="sgml">
 <dependency>
  <groupId>jline</groupId>
  <artifactId>jline</artifactId>
  <version>0.9.94</version>
 </dependency>
</src>


#configure
** Конфигурация плагина

Разработчик имеет возможность управлять настройками плагина, такими как, расположение
исходных кодов, названия скриптов, которые запускаются при тестировании или выполнении и
т.д.  Для изменения какого-либо параметра, вам необходимо добавить его в раздел
=configuration= в описании плагина.  Например, вот так можно задать название скрипта,
который будет запущен для выполнения тестов:

<src lang="sgml">
 <plugin>
   <groupId>com.theoryinpractise</groupId>
   <artifactId>clojure-maven-plugin</artifactId>
   <version>1.3.2</version>
   <configuration>
     <testScript>src/test/clojure/unapalabra/test.clj</testScript>
   </configuration>
   .....
 </plugin>
</src>

Вот список параметров, которые могут изменяться пользователем:
 
 =sourceDirectories= :: =sourceDirectory= 
 =testSourceDirectories= :: testSourceDirectory
 =warnOnReflection= :: true or false

написать про ограничение namespaces с помощью директивы =namespaces= и директив
=compileDeclaredNamespaceOnly= и =testDeclaredNamespaceOnly= - см. README



 =Script= :: Script
 =testScript= :: testScript, написать, что скрипт будет сгенерен автоматически (см. документацию)
 =replScript= :: repl script
 =runWithTests= :: true or false  или <code>-Dclojure.runwith.test=false</code>
 =clojureOptions= :: options

переменные для конфигурации swank, nailgun и т.п.


* Заключение

В принципе, информации изложенной в данной заметке должно хватить для начала использования
Maven вместе с Clojure.  В том случае, если у вас проект только на Clojure, и вы не
собираетесь использовать всю мощь Maven, то может быть стоит обратить внимание на утилиту
[[./ClojureLein][Leiningen]] которая написана специально для сборки проектов на Clojure.  

Дополнительные примеры использования Maven с Clojure вы можете найти в проектах [[http://github.com/liebke/incanter/tree/1.0.x][Incanter]]
(как пример проекта, состоящего из нескольких модулей), [[http://github.com/relevance/labrepl][labrepl]] и [[http://github.com/talios/clojure-maven-example][clojure-maven-example]], а
также в следующих заметках (на английском языке):
 - [[http://muckandbrass.com/web/display/~cemerick/2010/03/25/Why+using+Maven+for+Clojure+builds+is+a+no-brainer][Why using Maven for Clojure builds is a no-brainer]] (которая также включает видео,
   показывающая работу с clojure-maven-plugin
 - [[http://pupeno.com/blog/how-to-create-a-clojure-application/][How to create a Clojure application]]
 - [[http://stuartsierra.com/2009/09/03/mavens-not-so-bad][Maven’s Not So Bad]]


;  LocalWords:  Maven mvn scm update репозитории репозиториев xml pom plugin
;  LocalWords:  src плагинами подпроектов плагина clojureOptions Script compile
;  LocalWords:  testSourceDirectories sourceDirectories sourceDirectory test
;  LocalWords:  testSourceDirectory testScript replScript runWithTests sgml
;  LocalWords:  namespaces compileDeclaredNamespaceOnly clojure-maven-plugin
;  LocalWords:  testDeclaredNamespaceOnly репозиторием
