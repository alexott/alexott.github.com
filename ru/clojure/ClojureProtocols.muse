#title Типы и протоколы в Clojure
#keywords clojure, кложура, datatype, protocol, defprotocl, reify


 - http://clojure.org/protocols
 - http://clojure.org/datatypes
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/deftype
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/defrecord
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/reify
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/defprotocol
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/extend
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/extend-protocol
 - http://richhickey.github.com/clojure/clojure.core-api.html#clojure.core/extend-type

 - http://www.objectcommando.com/blog/2010/03/26/clojure-protocols-part-1/
 - http://www.objectcommando.com/blog/2010/03/29/clojure-protocols-part-2/
 - http://www.objectcommando.com/blog/2010/04/12/clojure-protocols-part-3/

 - http://github.com/richhickey/clojure/blob/0d1b2b19065350c5c072b63e912b2415a2c869e6/src/clj/clojure/core/protocols.clj
 - http://github.com/richhickey/clojure/blob/e660e467789ccc8e9922948b3498939e0239fc7c/src/clj/clojure/gvec.clj

 - http://gist.github.com/306174

 - http://vimeo.com/11236603 - video about protocols
 
 - http://bestinclass.dk/index.clj/2010/04/prototurtle-the-tale-of-the-bleeding-turtle.html

 - http://kotka.de/blog/2010/03/memoize_done_right.html#protocols

 - http://gist.github.com/377213 - annotations
 - http://gist.github.com/406504

 - http://freegeek.in/blog/2010/05/clojure-protocols-datatypes-a-sneak-peek/

; ================================================================================

*написать введение про космические корабли и т.п. в версии 1.2*


* Что это такое и зачем нужно?


чем не устраивает proxy/gen-class/gen-interface

что не нужно использовать AOT


There are several motivations for protocols:

    * Provide a high-performance, dynamic polymorphism construct as an alternative to interfaces
    * Support the best parts of interfaces
          o specification only, no implementation
          o a single type can implement multiple protocols
    * While avoiding some of the drawbacks
          o Which interfaces are implemented is a design-time choice of the type author, cannot be extended later (although interface injection might eventually address this)
          o implementing an interface creates an isa/instanceof type relationship and hierarchy
    * Avoid the 'expression problem' by allowing independent extension of the set of types, protocols, and implementations of protocols on types, by different parties
          o do so without wrappers/adapters
    * Support the 90% case of multimethods (single dispatch on type) while providing higher-level abstraction/organization



* Протоколы



*упомянуть, что protocols похожи на type classes в haskell (только без дефолтной реализации)*


* Типы

 deftype/defrecord/reify


* Misc

написать про =extend-protocol= & =extend-type=, что первый раскрывается во второй, и может
применяться для нескольких типов.... Также написать про =extend=....

также про =extends?=, =satisfies?=, =extenders= 
