#title The PCL-CVS package
#keywords emacs, cvs, pcl-cvs

<contents>

The *PCL-CVS* package provides to user very effective way to work with the *CVS*, that widely
used for software development, especially for open source projects[1].  Besides standard
features, provided, the *VC* package, this package implements following:
 - view state of files for given project;
 - work with changes in given project;
 - work with all, or selected, objects of your project;
 - very handy user interface for performing all of these tasks.

This package is included into GNU Emacs's distribution starting with version 21.  It also
available as a package for XEmacs.  For other Emacs's versions you can find source code at
[[ftp://flint.cs.yale.edu/pub/monnier/pcl-cvs][ftp://flint.cs.yale.edu/pub/monnier/pcl-cvs]].

* Basic concepts and principles

All work with package is performed in special buffer, created by *PCL-CVS* commands.  This
buffer is called =*cvs*=, and used to display files, their statuses and other information.
Some of package commands work only with existing directories, so you need to fetch data
from a repository before running any *PCL-CVS* command.

During work you can navigate in buffer and perform different commands on selected (or file
where cursor is placed) files.  For each file in project some status is assigned, and list
of available commands depends on this status.

Information in buffer is separated between several columns:
 - number of latest revision in repository and additional file status (optional);
 - =*= sign for marked files;
 - file status, described bellow;
 - version number for file (optional);
 - file name.

File status can has one of following values:
      
 *Added* :: file was added, but not yet committed to repository;
 *Removed* :: file was deleted, but not yet committed to repository;
 *Modified* :: file was changed.  For this status, could be displayed additional status --
   *merged*, that means, that new changes from repository was merged with your changes
   without any conflicts;
 *Conflict* :: during merging of changes, a conflict was detected.  Both versions of changes
   are written to the file, and content of original file is stored as =.#FILE.VERSION=.
   Besides conflicts due the different content of change, there are other types of
   conflicts, displayed as additional status: *removed* -- you removed file, but somebody
   change it in repository; *added* -- you added file, but somebody also add and commit it;
   *modified* -- you changed the file, but somebody removes it from repository;
 *Unknown* :: file is not registered in repository, and also not listed as ignored file;
 *Up-to-date* :: file matches the version in repository.  Additional status field provide
   more information about it: *added* -- you just added it to repository; *updated* -- file
   was updated from repository; *patched* -- similar to *updated*, but the changes from
   repository was merged with your changes; *committed* -- you just committed changes to
   repository;
 *Need-Update* :: repository has more up to date version of file, or file was added to
   repository, but not fetched to your copy;
 *Need-Merge* :: you changed file, and there are other changes in repository, so you have to
   merge with them;
 *Missing* :: file was removed from disk, but the =cvs remove= command for it wasn't
   performed.

* Main commands and key bindings

Many of commands, implemented by the *PCL-CVS* package has the =cvs-= prefix and names,
similar to names of *CVS* commands.  Some commands could be executed only in the =*cvs*=
buffer, that could be created one of following commands (commands usually run via =M-x= key
binding, either via =Tools= menu):
      
 =cvs-update= :: run =cvs update= on specified directory;
 =cvs-examine= :: run =cvs -n update= command, that just check state of directory without
   changing directory;
 =cvs-status= :: run =cvs status= command on specified directory;
 =cvs-checkout= :: run =cvs checkout= command for specified module;
 =cvs-quickdir= :: creates the =*cvs*= buffer, using data from =CVS/Entries= files.  This
   command is similar to the =cvs-examine= command, but it doesn't require access to
   repository.

These commands could be also executed in the =*cvs*= buffer -- you can use =M-u= for
=cvs-update=, =M-e= for =cvs-examine=, and =M-s= for =cvs-status=.  You can also perform
corresponding commands on selected files -- =O= (=cvs-mode-update=) to update files, =e=
(=cvs-mode-examine=) to update information about files, and  =s= (=cvs-mode-status=) to get
status information for selected files.

By default, all these commands are performed recursively, but you can change this
behaviour if you pass the =-l= option to *CVS*.

* Navigation and files selection

To navigation inside the =*cvs*= buffer user can use following commands: =cvs-mode-next-line=
(=n= key) -- to move to the next line, and =cvs-mode-previous-line= (=p= key) that move to
previous line.

There are several commands to work with marks.  To mark one file, you can use the
=cvs-mode-mark= command (=m= key). To remove mark from file there is the =cvs-mode-unmark=
command (=u= key).  To mark all files user can use =M= key (=cvs-mode-mark-all-files= command),
and to remove selection from all files, user can execute =cvs-mode-unmark-all-files=
command, that bound to =M-DEL=.  You can also use the =cvs-mode-mark-matching-files= command
(=%= key) to mark files, which names matches given regular expressions.  There is also
=cvs-mode-mark-on-state= command (=S= key), that mark files with given status.

* Work with files

Addition of files is very simple -- just mark all needed files (usually they have *Unknown*
status), and press =a= key (=cvs-mode-add= command).  Status of files will changed to *Added*,
and you will need to commit these changes to repository (see section [[#changes][Work with changes]]).
You can also use this command for files with *Removed* status -- this restore them.

To delete files you need to perform almost same sequence -- you need to mark files, and to
execute the =cvs-mode-remove-file= command (=r= key).  You will asked for confirmation, and if
you answer *yes*, then files will removed from your directory.  If files are registered in
*CVS*, then the =cvs remove= command also will performed.  You also need to commit these
changes to repository.

To update files you can run the =cvs-mode-update= command, that bound to =O= key.  This will
execute =cvs update= command for all files with *Need-update* status.

Sometimes, you need to keep some files, not registered in repository.  Such files are
displayed with *Unknown* status, but you can say *CVS* to ignore that files, just list them in
the =.cvsignore= file.  To put selected files into this file, you can use the
=cvs-mode-ignore= command, that bound to =i= key.

#changes
* Work with changes

Для подтверждения изменений в репозиторий вам нужно лишь выбрать файлы, изменения для
которых вы хотите подтвердить, а зачем нажать =c= (=cvs-mode-commit=) или =C=
(=cvs-mode-commit-setup=).  Это приведет к возникновению нового буфера с именем
=*cvs-commit*=, в котором вы можете ввести описание вносимых изменений.  После ввода
сообщения, вам необходимо лишь нажать =C-c C-c= и изменения будут внесены в репозиторий.  Вы
можете прервать этот процесс в любое время, просто не выполняя команду =C-c C-c=.  Разница
между командами =c= и =C= заключается в том, как они относятся к содержимому буфера
=*cvs-commit*=.  Первая команда сохраняет предыдущее содержимое буфера, в то время как
вторая команда создает буфер заново.

Если вы изменили файл, но не хотите вносить данные изменения в репозиторий, то вы можете
использовать команду =cvs-mode-undo-local-changes=, которая привязана к клавише =U=.  Эта
команда удаляет файл с вашими изменениями, и получает последнюю версию из репозитория.

Вы можете просмотреть изменения внесенные в файл с помощью нескольких команд.  Наиболее
часто используемой командой является =cvs-mode-diff=, которая вызывается с помощью клавиши
<code>=</code> или сочетания <code>d =</code>.  Эта команда показывает между измененным
файлом и его базовой версией.  Кроме этого, также определен набор команд, которые
выполняют следующие действия:
      
 =cvs-mode-diff-head= (=d h=) :: показывает изменения между выбранными файлами и головной
   (HEAD) версией соответствующего файла данной ветви разработки;
 =cvs-mode-diff-repository= (=d r=) :: показывает изменения между базовой и головной версиями
   выбранных файлов в текущей ветке разработки;
 =cvs-mode-diff-backup= (=d b=) :: показывает изменения между резервной версией файла и
   файлом. Эта команда особенно полезна в случаях возникновения конфликтов при слиянии
   изменений между файлами;
 =cvs-mode-diff-vendor= (=d v=) :: показывает изменения между выбранными файлами и головной
   версией в ветви производителя (vendor branch);
 =cvs-mode-diff-yesterday= (=d y=) :: показывает изменения между выбранными файлами и
   вчерашней головной версией файлов.

Также, для работы с изменениями вы можете использовать утилиты *Ediff* и *Emerge*.  Команда
=cvs-mode-idiff= (привязана к сочетанию клавиш =d e=) запускает *Ediff* или *Emerge* (зависит от
выбранных настроек), что позволяет вам интерактивно работать с изменениями.  При
использовании команды =cvs-mode-imerge= (сочетание клавиш =d E=) вы можете выполнить
трехстороннее интерактивное слияние изменений, но если уже существует конфликт в выбранных
файлах, то их содержимое не будет использоваться при работе, и после завершения работы,
все изменения сделанные *CVS*, будут затерты.

* Getting information about files, and other commands

Для получения информации о файлах может использоваться две команды.  Команда =cvs-mode-log=
(клавиша =l=) выполняет команду =cvs log= для выбранных файлов и результат отображается в
буфере =*cvs-info*=. А команда =cvs-mode-status= (клавиша =s=) выполняет =cvs status= для
выбранных файлов и результат отображается в буфере =*cvs-info*=.

Команда =cvs-mode-tag= (клавиша =t=) позволяет вам установить тег на выбранные файлы. По
умолчанию, данная команда применяется только к каталогам, но это поведение зависит от
настроек клиента.

Иногда вам может понадобиться, чтобы в буфере =*cvs*= не отображались некоторые записи.  Вы
можете сделать это двумя способами -- использовать команду =cvs-mode-remove-handled=
(клавиша =x=), которая удаляет из буфера уже обработанные записи, например, файлы со
статусом *Up-to-date*, или использовать команду =cvs-mode-acknowledge= (она привязана к
сочетанию =C-k=), которая просто удаляет нужные строки.  Обработанные записи могут удаляться
автоматически, в том случае, если переменная =cvs-auto-remove-handled= имеет значение не
равное =nil=.

Чтобы обновить содержимое буфера =*cvs*=, вы можете использовать команду
=cvs-mode-revert-buffer=, которая привязана к клавише =g=.  А для выхода из буфера =*cvs*=
используется команда =cvs-mode-quit=, которая привязана к клавише =q=.

Режим *PCL-CVS* также определяет несколько дополнительных режимов -- для редактирования
сообщений для журнала изменений, а также режим для просмотра журнала изменений.

* Customization

Behaviour of *PCL-CVS* functions depends on values of several variables, that you can
customize with =M-x customize-group pcl-cvs= command.  You can customize values of
variables, faces, used to display information, etc.

<div id="rule">[[./index][Back to main page]]</div>

Footnotes: 
[1] This situation is started to change.  Many new free version control systems was
    developed and used -- Subversion, Git, Darcs, Mercurial, etc.

