#title The PCL-CVS package
#keywords emacs, cvs, pcl-cvs

<contents>

The *PCL-CVS* package provides to user very effective way to work with the *CVS*, that widely
used for software development, especially for open source projects[1].  Besides standard
features, provided, the *VC* package, this package implements following:
 - view state of files for given project;
 - work with changes in given project;
 - work with all, or selected, objects of your project;
 - very handy user interface for performing all of these tasks.

This package is included into GNU Emacs's distribution starting with version 21.  It also
available as a package for XEmacs.  For other Emacs's versions you can find source code at
[[ftp://flint.cs.yale.edu/pub/monnier/pcl-cvs][ftp://flint.cs.yale.edu/pub/monnier/pcl-cvs]].

* Basic concepts and principles

All work with package is performed in special buffer, created by *PCL-CVS* commands.  This
buffer is called =*cvs*=, and used to display files, their statuses and other information.
Commands of package work only with existing directories, so you need to fetch data from a
repository before running any *PCL-CVS* command.

During work you can navigate in buffer and perform different commands on selected (or file
where cursor is placed) files.  For each file in project some status is assigned, and list
of available commands depends on this status.

Information in buffer is separated between several columns:
 - number of latest revision in repository and additional file status (optional);
 - =*= sign for marked files;
 - file status, described bellow;
 - version number for file (optional);
 - file name.

File status can has one of following values:
      
 *Added* :: file was added, but not yet committed to repository;
 *Removed* :: file was deleted, but not yet committed to repository;
 *Modified* :: file was changed.  For this status, could be displayed additional status --
   *merged*, that means, that new changes from repository was merged with your changes
   without any conflicts;
 *Conflict* :: during merging of changes, a conflict was detected.  Both versions of changes
   are written to the file, and content of original file is stored as =.#FILE.VERSION=.
   Besides conflicts due the different content of change, there are other types of
   conflicts, displayed as additional status: *removed* -- you removed file, but somebody
   change it in repository; *added* -- you added file, but somebody also add and commit it;
   *modified* -- you changed the file, but somebody removes it from repository;
 *Unknown* :: file is not registered in repository, and also not listed as ignored file;
 *Up-to-date* :: file matches the version in repository.  Additional status field provide
   more information about it: *added* -- you just added it to repository; *updated* -- file
   was updated from repository; *patched* -- similar to *updated*, but the changes from
   repository was merged with your changes; *committed* -- you just committed changes to
   repository;
 *Need-Update* :: repository has more up to date version of file, or file was added to
   repository, but not fetched to your copy;
 *Need-Merge* :: you changed file, and there are other changes in repository, so you have to
   merge with them;
 *Missing* :: file was removed from disk, but the =cvs remove= command for it wasn't
   performed.

* Main commands and key bindings

Команды, предоставляемые пакетом *PCL-CVS* имеют префикс =cvs-= и имена, аналогичные
подкомандам команды *CVS*.  Для выполнения части команд необходимо наличие буфера =*cvs*=,
который создается следующими командами (команды выполняются с помощью сочетания M-x или
через меню =Tools=):
      
 =cvs-update= :: выполняет =cvs update= для указанного вами каталога;
 =cvs-examine= :: выполняет команду =cvs -n update=, которая только проверяет что необходимо
   сделать, не внося никаких изменений;
 =cvs-status= :: выполняет команду =cvs status= для указанного вами каталога;
 =cvs-checkout= :: выполняет команду =cvs checkout= для указанного вами модуля;
 =cvs-quickdir= :: создает буфер =*cvs*= считывая данные из файлов =CVS/Entries=.  Эта команда
   аналогична =cvs-examine=, но не осуществляет доступа к репозиторию, что иногда очень
   полезно.

Эти команды могут выполняться также и из буфера =*cvs*= -- вы можете использовать =M-u= для
выполнения =cvs-update=, =M-e= для =cvs-examine= и =M-s= для =cvs-status=.  Кроме этого, вы можете
использовать соответствующие команды только для выбранных файлов -- =O= (=cvs-mode-update=)
для обновления файлов, =e= (=cvs-mode-examine=) для обновления информации о файлах и =s=
(=cvs-mode-status=) для получения информации о выбранных файлах.

По умолчанию, эти команды выполняются рекурсивно, но вы    можете изменить это поведение,
используя флаг =-l=    для команд *CVS*.

* Navigation and files selection

Для перемещения по буферу =*cvs*= используются команды =cvs-mode-next-line= (клавиша =n=) -- для
перемещения на следующую строку и =cvs-mode-previous-line= (клавиша =p=), которая приводит к
переходу на предыдущую строку.

Для работы с пометками используются множество разных команд. Для пометки одного файла
используется команда =cvs-mode-mark= (клавиша =m=), а для снятия пометки -- команда
=cvs-mode-unmark= (клавиша =u=).  Для пометки всех файлов используется клавиша =M= (команда
=cvs-mode-mark-all-files=), а противоположной ей командой является
=cvs-mode-unmark-all-files=, которая привязана к сочетанию клавиш =M-DEL=.  Вы также можете
пометить файлы, имена которых подпадают под заданное регулярное выражение -- команда
=cvs-mode-mark-matching-files= (клавиша =%=), или которые имеют определенный статус -- команда
=cvs-mode-mark-on-state= (клавиша =S=).

* Work with files

Добавление файлов производится очень простым способом -- просто отметьте все нужные файлы
(обычно они имеют статус *Unknown*), и нажмите на клавишу a (команда =cvs-mode-add=).  Статус
файлов будет изменен на *Added*, и затем вы должны подтвердить изменения в репозиторий
(см. раздел [[#changes][Работа с изменениями]]).  Вы также можете использовать эту команду и для файлов
со статусом *Removed*, что приведет к их восстановлению.

Удаление файлов производится аналогичным образом -- вы помечаете файлы, и выполняете
команду =cvs-mode-remove-file= (клавиша =r=).  При выполнении этой команды у вас будет
запрошено подтверждение, и затем файлы будут удалены из каталога.  В том случае, если
файлы находятся под контролем *CVS*, то для них также будет выполнена команда =cvs remove=.
Как и в предыдущем случае, вам также нужно будет подтвердить изменения в репозиторий.

Обновление файлов производится с помощью команды =cvs-mode-update=, которая привязана к
клавише =O=.  Это заставляет выполнить команду =cvs update= для файлов имеющих статус
*Need-update*.

Иногда, вам требуется хранить в каталогах проекта, файлы, не зарегистрированные в
репозитории.  Такие файлы обычно отображаются со статусом *Unknown*, но вы можете сообщить
*CVS*, что эти файлы необходимо игнорировать при выполнении команд, просто перечислив их в
файле =.cvsignore=.  Для помещения выбранного файла в этот файл, используется команда
=cvs-mode-ignore=, которая привязана к клавише =i=.  Используя ее, вы можете быстро поместить
мешающие файлы в список игнорируемых объектов.

#changes
* Work with changes

Для подтверждения изменений в репозиторий вам нужно лишь выбрать файлы, изменения для
которых вы хотите подтвердить, а зачем нажать =c= (=cvs-mode-commit=) или =C=
(=cvs-mode-commit-setup=).  Это приведет к возникновению нового буфера с именем
=*cvs-commit*=, в котором вы можете ввести описание вносимых изменений.  После ввода
сообщения, вам необходимо лишь нажать =C-c C-c= и изменения будут внесены в репозиторий.  Вы
можете прервать этот процесс в любое время, просто не выполняя команду =C-c C-c=.  Разница
между командами =c= и =C= заключается в том, как они относятся к содержимому буфера
=*cvs-commit*=.  Первая команда сохраняет предыдущее содержимое буфера, в то время как
вторая команда создает буфер заново.

Если вы изменили файл, но не хотите вносить данные изменения в репозиторий, то вы можете
использовать команду =cvs-mode-undo-local-changes=, которая привязана к клавише =U=.  Эта
команда удаляет файл с вашими изменениями, и получает последнюю версию из репозитория.

Вы можете просмотреть изменения внесенные в файл с помощью нескольких команд.  Наиболее
часто используемой командой является =cvs-mode-diff=, которая вызывается с помощью клавиши
<code>=</code> или сочетания <code>d =</code>.  Эта команда показывает между измененным
файлом и его базовой версией.  Кроме этого, также определен набор команд, которые
выполняют следующие действия:
      
 =cvs-mode-diff-head= (=d h=) :: показывает изменения между выбранными файлами и головной
   (HEAD) версией соответствующего файла данной ветви разработки;
 =cvs-mode-diff-repository= (=d r=) :: показывает изменения между базовой и головной версиями
   выбранных файлов в текущей ветке разработки;
 =cvs-mode-diff-backup= (=d b=) :: показывает изменения между резервной версией файла и
   файлом. Эта команда особенно полезна в случаях возникновения конфликтов при слиянии
   изменений между файлами;
 =cvs-mode-diff-vendor= (=d v=) :: показывает изменения между выбранными файлами и головной
   версией в ветви производителя (vendor branch);
 =cvs-mode-diff-yesterday= (=d y=) :: показывает изменения между выбранными файлами и
   вчерашней головной версией файлов.

Также, для работы с изменениями вы можете использовать утилиты *Ediff* и *Emerge*.  Команда
=cvs-mode-idiff= (привязана к сочетанию клавиш =d e=) запускает *Ediff* или *Emerge* (зависит от
выбранных настроек), что позволяет вам интерактивно работать с изменениями.  При
использовании команды =cvs-mode-imerge= (сочетание клавиш =d E=) вы можете выполнить
трехстороннее интерактивное слияние изменений, но если уже существует конфликт в выбранных
файлах, то их содержимое не будет использоваться при работе, и после завершения работы,
все изменения сделанные *CVS*, будут затерты.

* Getting information about files, and other commands

Для получения информации о файлах может использоваться две команды.  Команда =cvs-mode-log=
(клавиша =l=) выполняет команду =cvs log= для выбранных файлов и результат отображается в
буфере =*cvs-info*=. А команда =cvs-mode-status= (клавиша =s=) выполняет =cvs status= для
выбранных файлов и результат отображается в буфере =*cvs-info*=.

Команда =cvs-mode-tag= (клавиша =t=) позволяет вам установить тег на выбранные файлы. По
умолчанию, данная команда применяется только к каталогам, но это поведение зависит от
настроек клиента.

Иногда вам может понадобиться, чтобы в буфере =*cvs*= не отображались некоторые записи.  Вы
можете сделать это двумя способами -- использовать команду =cvs-mode-remove-handled=
(клавиша =x=), которая удаляет из буфера уже обработанные записи, например, файлы со
статусом *Up-to-date*, или использовать команду =cvs-mode-acknowledge= (она привязана к
сочетанию =C-k=), которая просто удаляет нужные строки.  Обработанные записи могут удаляться
автоматически, в том случае, если переменная =cvs-auto-remove-handled= имеет значение не
равное =nil=.

Чтобы обновить содержимое буфера =*cvs*=, вы можете использовать команду
=cvs-mode-revert-buffer=, которая привязана к клавише =g=.  А для выхода из буфера =*cvs*=
используется команда =cvs-mode-quit=, которая привязана к клавише =q=.

Режим *PCL-CVS* также определяет несколько дополнительных режимов -- для редактирования
сообщений для журнала изменений, а также режим для просмотра журнала изменений.

* Customization

Выполнение команд *PCL-CVS* зависит от значения некоторых переменных, настройку которых
легче всего осуществить с помощью команды =M-x customize-group pcl-cvs=.  В эти настройки
входит как настройка самих переменных, так и свойств начертаний, который используются для
отображения информации в буферах данного режима.

<div id="rule">[[./index][Back to main page]]</div>

Footnotes: 
[1] This situation is started to change.  Many new free version control systems was
    developed and used -- Subversion, Git, Darcs, Mercurial, etc.

