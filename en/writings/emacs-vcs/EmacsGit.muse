#title Work with Git
#keywords emacs, git

<contents>

Creation and popularity of *Git* closely related to development of Linux.  At first it was
used to provide support of Linux kernel development, but now it's used in the many other
open source projects.  As on these projects, are working many peoples over Earth, this
version control system support distributed style of work[1].

We can work with *Git* using several packages -- either use modules for *VC* и *DVC* packages,
or use packages *git.el* or *emacs-git*.  In first case we work with *Git* through standard
interfaces of *VC* & *DVC*. And *git.el* and *emacs-git* packages implement interfaces, that allow
user to use full functionality of *Git*.  In this part I'll describe these two packages.

* The git.el package

** Installation of package

Installation of *git.el* is very simple -- it comes in the *Git's* distribution in
=contrib/emacs/= subdirectory.  To compile package you need just run =make= command, that
could also be used to install the package (by default, package is installed into
=$HOME/share/emacs/site-lisp=, but you can change this behaviour by passing =emacslispdir=
parameter to =make=, or just copy all files to the directory, where Emacs can find them).

To use *git.el*, you need to put following line into your initialization file:

<src lang="emacs-lisp">
(require 'git)
</src>

and after executing it, you'll get all commands, provided by this package.

** Work with git.el

Work with package always starts with execution of =git-status= command, that ask user about
directory name in which it will search for *Git* repository, and after that, perform
analysis of repository state.  After analysis of repository state, package creates
=*git-status*= buffer, that will used to perform commands on files. Example of work with
this buffer you can see on picture below (at the bottom of picture you can see output of
=diff= command).  In this buffer enabled =git-status-mode=, that defines some set of commands
(and corresponding key bindings, many of them match the key bindings of *PCL-CVS* package.
This make transition to *Git* more easy).  All commands available only in this buffer, and
couldn't be used outside of it.
    
<div id="screenshot">
[[../../../common/writings/emacs-vcs/git-status.png]]
</div>
     
User can navigate in buffer with arrow keys, or with commands =git-next-file= (keys =n= and
=SPC=) and =git-prev-file= (=p= key).  For many commands user can specify numeric prefix (as for
many Emacs commands), that will change behaviour of command.

By default, all commands are executed on file, where cursor is located.  But user can also
select several files and commands will executed on selected files.  Selection is performed
with following commands and key bindings: =m= key (=git-mark-file=) mark current file and move
cursor one line below, =M= key (=git-mark-all=) marks all files in this buffer.  To remove
selection mark you can use =u= key (=git-unmark-file=) or =DEL= key (=git-unmark-file-up=), but
first command after removing of selection move cursor one string bellow, but the second,
to one string upper.  To remove selection mark from all files you can use =git-unmark-all=
command (=M-DEL= key binding).  To inverse selection you can use =git-toggle-all-marks=
command(=T= key).

As in the *PCL-CVS*, you can open current file with the =git-find-file= command (key =RET= or
=f=).  To open file to view you can use =v= key (=git-view-file=).  In case, if you've got
conflicts during merging, you can run conflict resolving command -- =git-resolve-file= (=R=
key).

You can add new files to repository with =git-add-file= command (=a= key), and remove with
=git-remove-file= command (=r= key).  To get reed from not needed files existing in directory,
but not registered in repository, you can put them into list of ignored files.  This could
be done with =git-ignore-file= command (=i=).  

Committing of changes is performed with =git-commit-file= command (=c= key), and reverting of
changes -- with =git-revert-file= command (=U= key).  User can view change log for repository
with =git-log-file= command (=l= key).
    
The =d= key is prefix key for all commands, related to work with changes.  Most important
command among them is the =git-diff-file= command, that you can call with <code>=</code> or
<code>d =</code> keys.  The =git-diff-file-base= command (=d b=) allow to find differences
between current and base file.  With =git-diff-file-idiff= command (=d e=) you can
interactively view for changes in current file. And the =git-find-file-imerge= command (=d E=)
allows user to open current file for interactive application of changes.  Other commands
allow to view changes relative to main branch -- =git-diff-file-merge-head= command (=d h=),
relative to versions of files before merges -- =git-diff-file-mine= command (=d m=), etc.
Full list of commands you can get from help for this mode.

Other command allow to refresh status buffer -- =git-refresh-status= command (=g= key), resign
from the buffer -- =git-status-quit= (=q=), remove processed files from list --
=git-remove-handled= command (=x=) and get help about mode -- =git-help= (=h= or =?= keys).

** Customization

You can customize package with standard customization routines of Emacs.  Corresponding
customization group has name =git= and allow to specify different *Git* settings and faces
used for display data.

; * Пакет emacs-git

; ** Установка


; ** Работа с пакетом


; ** Настройка

; * Minor modes for Git

<div id="rule">[[./index][To main page]]</div>

Footnotes: 
[1] Although we can use it for work in centralized environment

