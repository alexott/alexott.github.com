#title VC package
#keywords emacs, vc, cvs, subversion, rcs, version control, hg, mercurial, darcs

<contents>

The *VC* package provides to user ability to work with different version control systems
(VCS) via unified user interfaces.  Now it supports following VCS (via VCS-specific
modules): *rcs*, *CVS*, *MetaCVS*, *Subversion*, *GNU Arch*, *sccs*, *Darcs*, *SourceSafe*, *ClearCase*, *Git*
and *Mercurial* (some of them available only in GNU Emacs 22.0, development repository of
GNU Emacs or at author's sites)[1].

* Basic concepts and approaches

Design of *VC* package took many things from the design of *rcs* version control system.  So
many concepts tightly coupled with concepts of this VCS.

When file is under control of VCS, then we say that it "registered" in VCS.  For each file
exists "main" file, that contain data and history of changes.  For each "main" file could
exists "work" file, that could be modified.  In some VCS you need to block work file
before add any change.  In other VCS you can add changes to your copy of work file, and
than explicitly commit changes to repository.  For systems, that require explicit locking
of files, to add a change to a file, you need to switch file from read-only state to
read-write state.  And usually, in such systems, only one user can make changes into
locked files, and other users should wait until that user finish modification of files and
remove block on file(s).

When you work with *VC* some information about its state is displayed in status line.
Information is represented in following form: at first is short name of VCS, used for
current file, next is displayed symbol, describing file's state, and then file's version
number is displayed.  If state symbol is equal to =-=, then file is not blocked or changed.
If file is blocked or modified, then symbol is changed to =:=.  If file is blocked by other
user, then status field will displayed as =:user:=.

* Work with package

** Basic work sequence

The main function of *VC* package is =vc-next-action= (=C-x v v=), that performs next logical
command of version control system.  Depending on used VCS, order of commands in this
sequence could differ.  For systems, that require blocking of file (*rcs*, *sccs*, and *CVS*
with corresponding setup), order of executions is following:
 - if file is not registered in VCS, then register it;
 - if file is registered, but not blocked, then fetch latest version from repository and
   block it;
 - if file was blocked by current user, but not changed, then it fetches new version and
   updates buffer;
 - if file was changed, then display a new buffer to enter comment about change, and
   commit changes;
 - if file was blocked by other user, then *VC* tries to block it.
      
For systems, that doesn't support explicit blocking, order of execution is slightly different:
 - if file is not registered in VCS, then register it, but doesn't commit it;
 - if file already was added, but not committed, then commit it;
 - if file was changed, then display a new buffer to enter comment about change, and
   commit changes;
 - if file was changed in repository, then ask user, and perform merging of changes in
   your copy of work file.

User can pass prefix argument to =vc-next-action= function.  Passing of this argument allow
user to change behaviour of function -- for example, user can set version number for new
file, or for file, that will fetched from repository, or change version control system (if
file was registered in different VCS).  

Entering of commit message is performed in special buffer with name =*VC-Log*=.  User can
enter message, and commit changes by pressing =C-c C-c=.  If you doesn't want to commit
changes, just leave this buffer without pressing =C-c C-c=.  And if you want use same commit
message for several files, then you can use =M-n=, =M-p=, =M-s= and =M-r= key bindings, that allow
you to navigate in messages history.

** Work with changes

User can use *VC* to view changes, that he did during work with files.  To get list of
changes between work copy and latest committed version, user can use =vc-diff= function
(<code>C-x v =</code>).  If user runs this function with prefix argument, then he can
obtain list of changes between any two versions. The =vc-version-other-window= function (=C-x
v ~=) allows to get from repository any version of file, and show it in separate buffer.
In some VCS you can obtain annotated versions of files, and *VC* also support this feature
with =vc-annotate= function, that bound to =C-x v g=.  With annotated version you can see who
make concrete changes, in which version they was made, etc.

Вы можете отменить внесенные изменения с помощью команд, определенных пакетом.  Пакет
определяет две команды отмены изменений -- =vc-revert-buffer= (сочетание =C-x v u=), которая
возвращает файл связанный с буфером к версии, на которой он был основан, а команда
=vc-cancel-version= (сочетание =C-x v c=) отменяет последнее подтвержденное изменение.  Для
последней команды, вы можете не откатывать изменения для текущего буфера, так что вы
можете внести новые изменения, основанные на промежуточных результатах.  После выполнения
команды =vc-revert-buffer= файл остается не заблокированным, так что для внесения изменений,
вас необходимо снова заблокировать его.

** Work with files
 
Регистрация файла в системе контроля версий производится с помощью команды =vc-register=
(сочетание клавиш C-x v i).  Выбор системы контроля версий в которой файл будет
зарегистрирован, зависит от нескольких параметров.  Если в данном каталоге есть файлы,
зарегистрированные в какой-либо системе контроля версий, то используется именно она.  Если
в каталоге находятся файлы зарегистрированные в нескольких системах контроля версий, то
используется та, которая находится первой в списке =vc-handled-backends=.  А если нет ни
одного зарегистрированного файла в данном каталоге, то используется первая запись из
списка =vc-handled-backends=.  Так что вы зарегистрируете файл в *CVS* в пустом каталоге
только явно указав использовать эту систему контроля версий.  

По умолчанию, новый файл получает номер версии равный 1.1.  Вы можете использовать другое
число, если вы используете числовой аргумент при выполнении данной команды.  В том случае,
если переменная =vc-initial-comment= имеет не пустое значение, то данная команда запросит у
пользователя комментарий, который будет использован для описания файла.  Пакет *VC*
поддерживает переименование зарегистрированных файлов.  Для этой цели вы можете
использовать команду =vc-rename-file=, которая переименовывает рабочий файл, а также
"главный" файл.  К тому же эта команда, обновляет все снимки, чтобы они ссылались на новое
имя файла.  Но вы не можете использовать эту команду для заблокированных файлов.  Для
получения информации о текущем файле вы можете использовать команду =vc-print-log=, которая
привязана к сочетанию клавиш =C-x v l=.  Данная команда отображает историю изменений,
включая текст комментариев к этим изменениям.

** Use *VC* together with с Dired
 
Команды описанные в предыдущих разделах в первую очередь предназначены для работы с
отдельными файлами.  Но для больших проектов, часто необходимо работать с множеством
файлов -- просматривать какие файлы изменились, список изменений и т.п.  Для реализации
этих действий, пакет *VC* поддерживает специальный режим -- =vc-dired-mode=.  Для создания
буфера, использующего такой режим, используется команда =vc-directory= (сочетание =C-x v d=).
Буфер созданный такой командой почти не отличается от обычного буфера *Dired*.  В буфер
помещается рекурсивный список файлов, зарегистрированных в системе контроля версий.  

При работе с буфером *Dired*, данные могут отображаться в сокращенном или полном режиме.  В
сокращенном режиме показываются только измененные или не обновленные файлы.  В полном
режиме, показываются все файлы зарегистрированные в системе контроля версий.  Пользователь
может переключаться между полным и сокращенным режимом с помощью сочетания клавиш =v t=.
При показе данных в буфере, отображается имя пользователя (для систем поддерживающих
блокировки) или статус файла (для остальных систем).  В буфере с =vc-dired-mode= действуют
все команды *Dired*, за исключением команды =v=, которая используется в качестве префиксной
для команд пакета *VC*.  Команды *VC* те же самые, что и описанные в прочих разделах, только
не используется префикс =C-x=, и они могут выполняться к множеству помеченных файлов.

** Work with branches

Как и другие пакеты для интеграции с системами контроля версий, пакет *VC* поддерживает
работу с разными ветвями версий.  Пакет поддерживает создание ветвей, переключение между
ними, а также слияние изменений между разными ветвями.  Для переключения на другую ветвь
разработки пользователю необходимо лишь задать префиксный аргумент для команды
=vc-next-action=.  Пользователь может указывать не конкретную версию, а лишь номер ветви.
Следующая работа будет производиться именно в этой ветви.  Создание новой версии
производится аналогичным образом -- необходимо лишь при подтверждении изменений с помощью
команды =vc-next-action= указать новый номер версии используя префиксный аргумент.  Если
пользователь укажет номер для не существующей ветви, то она будет создана.  После создания
ветви, все остальные действия будут производиться в рамках этой ветви.  Для работы с
другой веткой, пользователь должен явно переключиться на нее.  

Для слияния изменений используется команда =vc-merge=, которая привязана к сочетанию клавиш
=C-x v m=.  Данная команда запрашивает у вас откуда необходимо брать изменения, и применяет
их к вашей рабочей версии.  Если вы ничего не ввели в ответ на запрос, то будут взяты
изменения из ветви с которой вы работаете, если они были подтверждены за время работы с
вашим файлом.  Если во время работы возникают конфликты, то пакет оповещает пользователя
об этом, и помечает конфликты в файле, или даже может запустить *Ediff* для их разрешения.
Вы можете воспользоваться командой =vc-resolve-conflicts= для разрешения возникших
конфликтов.  Она запускает новую сессию *Ediff*, где вы можете просматривать возникшие
конфликты, и применять или отвергать предлагаемые изменения.

** Work with remote repositories

Некоторые системы контроля версий поддерживают концепцию центрального репозитория, который
хранит "главные" файлы, а также историю изменений.  Репозиторий может быть локальным, или
располагаться на удаленном сервере.  *VC* автоматически распознает тот случай, когда
репозиторий располагается на удаленном сервере, и принимает некоторые действия, которые
позволяют более комфортно работать с данными, особенно в тех случаях, когда связь является
медленной и нестабильной.  При первом редактировании файла, создается локальная копия
изменяемого файла.  Это позволяет выполнять команды получения списка изменений, или отмены
внесенных изменений, без какого-либо сетевого взаимодействия.  Создаваемая копия файла
имеет имя =FILE.~VERSION.~=.  При подтверждении изменений в репозиторий, локальная копия
удаляется.  Пользователи также могут создавать резервные копии вручную, используя команду
=vc-version-other-window=, разница между резервными копиями созданными автоматически и
вручную, лишь в лишнем знаке точка перед знаком =~=.  Многие команды *VC* могут использовать
любую из резервных копий.
    
** Work with snapshots

"Снимок" (snapshot) -- это именованный набор версий файлов, который может рассматриваться
как отдельная единица.  Некоторые системы контроля версий сами поддерживают концепцию
"снимков", тогда пакет *VC* использует эти возможности.  Для прочих систем контроля версий,
пакет *VC* сам реализует поддержку "снимков".  В этом случае, эти "снимки" видны только при
использовании пакета *VC*.  Для работы со "снимками" пакет *VC* определяет две команды.
Команда =vc-create-snapshot= (сочетание =C-x v s=) создает "снимок" на базе версий файлов
находящихся в текущем каталоге, или ниже.  Команда =vc-retrieve-snapshot= (сочетание клавиш
=C-x v r=) позволяет пользователю получить "снимок" с заданным именем.  Многие команды
пакета *VC* позволяют использовать имена "снимков" в качестве аргументов вместо номеров
версий файлов.  Это особенно полезно просмотре списка изменений между релизами программ.

** Other functions

Обычно, для файлов находящихся под управлением системы контроля версий, для каждого файла
ведется отдельный список изменений.  Но в проектах GNU списки изменений ведутся для всего
проекта, или для отдельных каталогов.  Для организации взаимодействия между этими двумя
подходами, пакет *VC* определяет отдельную команду =vc-update-change-log= (она привязана к
сочетанию =C-x v a=), которая обновляет общий список изменений на основании списка изменений
для отдельных файлов.  При использовании префиксов, данная команда позволяет обновить
общий список изменений, только изменениями для отдельных файлов.  Вы можете вставлять в
файлы специальные идентификационные заголовки.  Эти заголовки зависят от конкретной
используемой системы контроля версий, и в некоторых системах, они используются для
служебных целей.  Для вставки такого заголовка, вы можете использовать команду
=vc-insert-headers= (сочетание клавиш =C-x v h=).  *VC* автоматически выбирает заголовок
подходящий для системы контроля версий.  Заголовки хранятся в переменных вида
=vc-BACKEND-header=, так что вы можете изменять их значения, для вставки собственных
заголовков.

* Customization

Используя стандартные средства настройки Emacs пользователь может настроить поведение
выполняемых команд.  Для этого необходимо лишь выполнить =M-x customize-group vc=.  Часть
опций применяется ко всем поддерживаемым системам контроля версий, часть применяется
только к конкретным реализациям.  Полное описание основных переменных, используемых для
настройки пакета *VC* вы можете найти в руководстве по GNU Emacs.

* Additional information 

Detailed description of *VC* package is provided as part of Emacs's documentation.  Besides
this, you can find more information about  *VC* package at  [[http://www.emacswiki.org/cgi-bin/wiki/CategoryVersionControl][Emacs WiKi]].

Some of modules, that provides integration of *VC* with concrete VCS are not included into
GNU Emacs or XEmacs distributions.  You can find them on the author's sites:
 - *vc-darcs* -- http://www.emacswiki.org/elisp/vc-darcs.el
 - *vc-vss* -- http://www.chezmarshall.freeserve.co.uk/elisp/vcvss.html
 - *vc-clearcase* -- http://www.fukt.hk-r.se/~flognat/vc/

<div id="rule">[[./index][Back to main page]]</div>

;  LocalWords:  VCS rcs CVS MetaCVS

Footnotes: 
[1] Some modules lacks implementation of some commands, provided by *VC*.  For example,
    *vc-arch* doesn't support =vc-cancel-version= function, and some other, not so important.

