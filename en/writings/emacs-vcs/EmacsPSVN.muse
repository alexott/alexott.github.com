#title PSVN Package
#keywords emacs, svn, subversion, psvn

<contents>

The *PSVN* package provide same functionality for *Subversion*, as the *PCL-CVS* for *CVS*.  This
package provide user access to all features of *Subversion*.

* Installation of package

Installation of package is pretty simple -- download latest version from [[http://www.xsteve.at/prg/emacs/psvn.el][site]], put it to
place, where Emacs can find it, and add following line to initialization file:
    
<src lang="emacs-lisp">
(require 'psvn)
</src>

* Work with package

The *PSVN* package use almost same principles as the *PCL-CVS* package -- all work is
performed in special buffer.  Currently this buffer is created only by =svn-status=
function.  Buffer, that created by =svn-status= function has name =*svn-status*=.  Example of
this buffer, you can see on the picture below.

<div id="screenshot">
[[../../../common/writings/emacs-vcs/svn-status.png]]
</div>

As you can see on picture, information is displayed as a table.  In first column the
status of object is displayed.  In second column -- version number for given object, in
the third -- number of version, when file was changed, in the fourth column -- name of
user, who had changed this object, and in the last column -- object's name.  List of
available statuses and their descriptions you can find in the output of =svn status -v=
command.

Functions, that are performed by user is applied to current file, or to marked files.  User
can execute functions using key bindings, or using menu, called =SVN=, that displayed in the
=*svn-status*= buffer.

** Navigation and work with marks

User can navigate in =*svn-status*= buffer with almost same functions as in packages for
other VCS -- he can use either arrow keys, either functions: =svn-status-previous-line=
(bound to =C-p=) to move to previous line, and =svn-status-next-line= (bound to =C-n=) to move
to the next line.  This is slightly different from other packages, that use =n= and =p= for
these actions.

To set marks to objects *PSVN* use same key bindings as other packages -- to mark object the
=m= key (=svn-status-set-user-mark=) is used, and to remove mark the =u= key
(=svn-status-unset-user-mark=) is used.  Besides this, to remove all marks, user can use the
=svn-status-unset-all-usermarks= function (=M-DEL= or =* != key bindings), and to remove a mark
from an object, that located before cursor, user can use
=svn-status-unset-user-mark-backwards= function, that bound to =DEL= key.

User can also mark files with concrete status.  To mark modified files user can use
=svn-status-mark-modified= function (=* M=), to mark added files -- =svn-status-mark-added=
function (=* A=), and to mark not registered files -- =svn-status-mark-unknown= function (=* ?=).

** Work with files

User can add files to repository using several functions.  Most often used function is
=svn-status-add-file= (it bound to =a=), that add file(s) (current one or several marked) to
repository.  There are also =svn-status-add-file-recursively= function (=A= key), that add
files recursively, and =svn-status-make-directory= function (=+= key), that creates directory
in repository.  Don't forget, that addition of files is performed only in your directory,
and files will added to repository only after explicit commit.

Deletion of files is performed with =svn-status-rm= function (=D= key or =C-d=), that executes
=svn rm= command.  As *Subversion* supports renaming of files with preserving of history, and
*PSVN* also has function to perform this operation.  This function is called =svn-status-mv=
and bound to =R= key.  User also must explicitly commit its changes to repository.

You can use update your work directory from repository with =svn-status-update-cmd= function
(=U= key), that executes =svn update= command.  You can also fetch concrete version of file
with =svn-status-get-specific-revision= function (=~= key).  After execution of this command,
file with name =F.~REVISION~= will created, and it will contain data for concrete version.
You can obtain state of parent directory with the =svn-status-examine-parent= function, that
bound to =^= key.

You can view and edit files directly from =*svn-status*= buffer.  To open file in the same
windows as =*svn-status*= buffer you can use =svn-status-find-files= function (=f= key).  And to
open file in other window, you can use =svn-status-find-file-other-window= function (=o= key).
You can also view file with =svn-status-view-file-other-window= function (=v= key), that is
very handy when you don't want to change file.  The =RET= key
(=svn-status-find-file-or-examine-directory=) performs two operations -- it either opens
file, or displays state of files in given directory.

; TODO: add description of checkout 

** Work with changes

As was mentioned above, after performing almost all operations you need explicitly commit
changes to repository.  You can do this with =svn-status-commit-file= function (=c= key).
After you perform this operation, your changes will available to all users, who are
working with this repository.

You can also remove changes, that you did in files.  This operation is performed with
=svn-status-revert= function, that bound to =r= key.  *Subversion* supports removing of *conflict*
state from files, that has this status.  To do this, you can use =svn-status-resolved=
function (=V= key), that executes =svn resolved= command.

As in many other packages that works with VCS, *PSVN* implements functions that allow to get
list of changes in files between current and base versions.  The =svn-status-show-svn-diff=
function (<code>=</code> key), displays differences between modified file and its version
in repository.  The =svn-status-show-svn-diff-for-marked-files= function (<code>C-=</code>)
performs this operation for all marked files.  And the =svn-status-ediff-with-revision=
function (=E= key) uses *Ediff* to perform this operation.  All these functions support
comparison with arbitrary version, if they'll get prefix argument before they execution.

** Work with meta-data (properties)

Система контроля версий *Subversion* позволяет пользователю привязывать различные метаданные
к файлам и версиям.  Кроме этого, существуют метаданные, не привязанные к конкретной
версии.  Изменения в метаданных распространяются вместе с изменениями, внесенными в
обычные файлы.  Подробнее о метаданных и работе с ними вы можете прочитать в книге
"Version Control with Subversion", которая доступна на сайте данной системы.

Пакет *PSVN* предоставляет набор команд для работы с метаданными.  Эти команды доступны как
обычным способом, так и через привязки к клавишам. В качестве префиксной клавиши
используется клавиша =P=.

Доступные команды можно разделить на две группы -- первая группа используется для работы с
произвольными метаданными, а вторая группа -- для работы с конкретными записями.

К первой группе относятся команды: =svn-status-property-parse= (сочетание =P p=) используется
для разбора записи, =svn-status-property-set= (сочетание =P s=) задает значение для конкретной
записи, =svn-status-property-delete= (сочетание =P d=) удаляет выбранную запись,
=svn-status-property-list= (сочетание =P l=) отображает список определенных для данного
объекта записей, =svn-status-property-edit-one-entry= (сочетание =P e=) позволяет изменить
запись.

Во вторую группу входят следующие команды: =svn-status-property-edit-svn-ignore= (сочетание
=P TAB=) позволяет вам отредактировать список файлов, которые не будут учитываться при
*Subversion*, =svn-status-property-ignore-file= (сочетание =P i=) вносит текущий файл в список
игнорируемых объектов, =svn-status-property-ignore-file-extension= (сочетание =P I=) позволяет
пополнить список игнорируемых объектов шаблоном для выборки всех файлов с расширением как
у текущего, =svn-status-property-set-eol-style= (сочетание =P y=) позволяет задать какой стиль
обозначения перевода строк используется для данного объекта,
=svn-status-property-set-keyword-list= (сочетание =P k=) позволяет отредактировать список
ключевых слов связанных с данным объектом.

** Information retrieving and other functions

Для получения информации о текущем файле может использоваться команда =svn-status-info=,
которая привязана к клавише =i=.  При ее использовании, в буфере =*svn-process*= будет
отображен результат выполнения команды =svn info=.  Информация может показаться слишком
подробной, и для ее обработки может быть использована команда =svn-status-parse-info=
(клавиша =I=), которая разбирает результат предыдущей команды, и приводит его к более
компактному виду.  Для получения информации об авторе и версии для указанного файла, может
использоваться команда =svn-status-blame= (клавиша =b=), а для просмотра логов для выбранных
файлов, используется команда =svn-status-show-svn-log= (клавиша =l=).

Обновить содержимое буфера =*svn-status*= вы можете с помощью команды =svn-status-update=
(клавиша =g=), а посмотреть на вывод команды =svn= вы можете использовав клавишу =s= (команда
=svn-status-show-process-buffer=).  Вы также можете управлять тем, объекты с каким статусом
будут отображаться в буфере =*svn-status*=.  Для скрытия не изменявшихся файлов используется
команда =svn-status-toggle-hide-unmodified= (клавиша =_=), а для скрытия незарегистрированных
файлов -- команда =svn-status-toggle-hide-unknown= (клавиша =?=).  Обе эти команды являются
переключателями, и могут использоваться как для отключения показа файлов, так и для
включения показа.

Для выхода из буфера =*svn-status*= и его удаления используется команда
=svn-status-bury-buffer=, которая привязана к клавише =q=, также как и в других пакетах.

* Customization

Стандартные средства Emacs позволяют пользователю настроить только параметры начертаний,
которые используются для отображения данных в буфере.  Остальные настройки нужно задавать
с помощью команд Emacs Lisp.  Но большая часть этих настроек имеет нормальные значения по
умолчанию, так что вам скорее всего не понадобиться изменять эти значения.

*PSVN* также предоставляет несколько хуков, которые могут использоваться для задания
параметров создаваемых буферов, или выполнения дополнительных команд.  Хук
=svn-log-edit-mode-hook= выполняется когда пакет входит в режим =svn-log-edit=, а
=svn-log-view-mode-hook= выполняется при вхождении в режим =svn-log-view=.

<div id="rule">[[./index][На главную страницу]]</div>
