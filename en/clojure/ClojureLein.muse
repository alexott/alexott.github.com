#title Use of Leiningen to build Clojure code
#keywords leiningen, clojure, build tool

This article describes the Leiningen tool for building of projects, written in Clojure.

<contents>

* What is Leiningen?

[[http://github.com/technomancy/leiningen][Leiningen]] is a tool for building of code, written in Clojure.  Leiningen is much simpler
comparing with [[./ClojureMaven][Maven]] and allows to define project's configuration using Clojure[1].
Leiningen uses external tools and libraries to resolve dependencies and build a code, so
it's pretty small.  This tool is getting more popularity between Clojure developers --
it's extensible by using additional modules (plugins), such as plugin for compilation of
Java code, and many others.

Out of box Leiningen implements basic tasks -- compilation of code, testing, creation of
package, installation, etc.  Besides this, it also provides basic support for work with
Maven, so you can use packages, built by this tool in other projects.

* Installation

Leiningen's installation procedures for Unix-like OSes and for MS Windows are slightly
different.  Installation on Unix is quite easy -- you just need to download [[http://github.com/technomancy/leiningen/raw/stable/bin/lein][lein]] script,
make it executable, copy to directory, listed in =PATH=, and execute =lein self-install=
command.  During execution of this command, Leiningen will download and install all
packages, that are needed to its work.

Installation on MS Windows is more complicated, because automatic install isn't
implemented yet.  Instead of =lein= script you need to download [[http://github.com/technomancy/leiningen/raw/stable/bin/lein.bat][lein.bat]] script, and put it
into directory, listed in =PATH=.  Then download [[http://github.com/downloads/technomancy/leiningen/leiningen-1.1.0-standalone.jar][leiningen.jar]] package and set value of
=LEIN_JAR= environment variable to full path to this file.  After this download [[http://build.clojure.org/releases/org/clojure/clojure/1.1.0/clojure-1.1.0.jar][clojure.jar]]
package and set value of =CLOJURE_JAR= environment variable to full path to this file.  Now
you can start to use Leiningen.

* Structure of Leiningen's project

Leiningen uses fixed structure of project -- in the root directory of the project you need
to have the =project.clj= file, that contains project's definition.  The only necessary
component of the definition is =defproject= -- Clojure's macro, that is expanded into set of
build instructions.  =project.clj= can also include other code, written in Clojure, that
will executed during build process.

Project's source code should be stored in =src= directory, tests -- in =test= directory, and
additional resources, used by project -- in =resources= directory.  The =lib= directory is
used to store libraries, used by project -- they are copied there with the =lein deps=
command.  List of libraries is calculated using information about dependencies, declared
in project.  If you want to use library, that isn't stored in one of the Maven's
repositories, then you can just copy this library into =lib= directory, and it will
available to your project.

But names of directories aren't hard-coded -- you can use <code>defproject</code>'s options
to change their values:
 =:source-path= :: name of directory with project's source code (by default -- =src=);
 =:compile-path= :: name of directory for resulting Java classes (by default --
   =classes/=);
 =:resources-path= :: name of directory with project's resources (by default -- =resources/=);
 =:test-path= ::  name of directory with test's source code (by default -- =test/=);
 =:library-path= ::  name of directory, where libraries are stored (by default -- =lib/=).

You can also add additional information to project's definition -- description (the
=:description= option) and link to project's home page (the =:url= option).

The fastest way to create a new project is to use =lein new= command, that accepts one
required argument -- name of the project.  This command will create a new directory with
name of the project, and will create inside it the =project.clj= file with declaration of
the project (including dependencies on Clojure and =clojure-contrib=), the =README= file with
template of project's description, and two directories -- =src= and =test= for source code &
tests.  Now you can start to work with you project.

** Project's example

Let look to simple project specified in =project.clj= with following code (full code of this
project you can find at [[http://github.com/alexott/lein-simple-project/][github]]):

<src lang="clojure">
(defproject test-project "1.0-SNAPSHOT"
  :description "A test project."
  :url "http://my-cool-project.com"
  :dependencies [[org.clojure/clojure "1.1.0"]
                 [org.clojure/clojure-contrib "1.1.0"]]
  :dev-dependencies [[leiningen/lein-swank "1.2.0-SNAPSHOT"]]
)
</src>

We define a project =test-project= with dependencies on Clojure and =clojure-contrib=
libraries, and also have additional dependency on library, that we'll use during
development -- =swank-clojure=.

In the =src= directory there is only one file -- =simple.clj=, that declares namespace =simple=
with following code inside:

<src lang="clojure">
(ns simple)

(defn hello
  ([] "Hello world!")
  ([name] (str "Hello " name "!")))
</src>

In the =test= directory we have file =simple_test.clj=, that contains test for =simple=.  We're
using standard library =clojure.test= to implement test.  Test's source code looks following
way:
<src lang="clojure">
(ns simple-test
  (:use clojure.test)
  (:use simple))

(deftest simple-test
  (is (= (hello) "Hello world!"))
  (is (= (hello "test") "Hello test!")))
</src>

This is complete project, and we could execute any Leiningen's command for it.

** How to specify dependencies

Одной из важных и наиболее часто используемых частей =defproject= является определение
зависимостей от других библиотек, находящихся во внешних репозиториях.  Для проектов
написанных на Clojure это в первую очередь зависимость от самого языка, как это показано в
примере.

Различают разные виды зависимостей для которых используются разные опции проекта:
 =:dependencies= :: стандартные зависимости -- для библиотек, которые используются в
   программе;
 =:dev-dependencies= :: зависимости для библиотек, которые используются во время разработки
  программы, например, зависимость от =swank-clojure= и т.п. библиотек. 

Кроме этого, имеется плагин [[http://github.com/swannodette/native-deps][native-deps]], который реализует поддержку зависимостей от
непереносимых библиотек (специфических для конкретных платформ).  [[http://nakkaya.com/2010/04/05/managing-native-dependencies-with-leiningen/][Вот пример]] использования
этого плагина.

Каждая из перечисленных опций является вектором, каждый элемент которого является вектором
с описанием библиотеки.  Это описание состоит из (вы уже видели эти определения в примере
проекта):
 - символа, определяющего имя библиотеки (группа и название библиотеки, также как и в
   [[./ClojureMaven][Maven]]), например, =org.clojure/clojure=;
 - строки с версией библиотеки, например, ="1.1.0"= или ="1.2.0-master-SNAPSHOT"=;
 - необязательных опций.  Опции могут использоваться для уточнения зависимостей. Например,
   для указания того, какие библиотеки должны быть исключены из зависимостей, если указана
   опция =:exclusions=. Вот пример исключения лишних зависимостей для библиотеки =log4j=: 
<src lang="clojure">
[log4j "1.2.15" :exclusions [javax.mail/mail
                             javax.jms/jms
                             com.sun.jdmk/jmxtools
                             com.sun.jmx/jmxri]]
</src>

** Repositories

Leiningen по умолчанию подключает три репозитория:
 - [[http://mvnrepository.com/][стандартный репозиторий]] Maven;
 - [[http://build.clojure.org/snapshots/][репозиторий]] с ежедневными сборками Clojure;
 - [[http://clojars.org/repo/][репозиторий Clojars]], предназначенный для распространения кода, написанного на Clojure.

Помимо этого, пользователь может указать дополнительные репозитории с помощью опции
=:repositories=.  В качестве параметров для этой опции указывается отображение (map)
состоящее из имени репозитория и его адреса (URL).  Например, вот так подключается
репозиторий [[http://apache.org][проекта Apache]]:
<src lang="clojure">
(defproject test2 "1.0.0-SNAPSHOT"
  :dependencies [....]
  :repositories {"apache-releases" "http://repository.apache.org/content/repositories/releases/"}
  )
</src>

* Work with Leiningen

Типичное использование Leiningen выглядит следующим образом: 
 - вы создаете проект (=lein new=), определяете зависимости от внешних библиотек и
   загружаете их к себе с помощью =lein deps= (эту команду надо выполнять после каждого
   изменения списка зависимостей);
 - пишете код регулярно запуская =lein compile=, =lein test=, а также пользуясь при
   необходимости =lein repl=, =lein swank= или =lein nailgun= (в зависимости от предпочтений)
   для интерактивной разработки;
 - если вы разрабатываете библиотеку, которую планируете использовать в других проектах,
   то вы можете установить ее в локальный репозиторий с помощью =lein install= или залить на
   [[http://clojars.org/][Clojars]] (с помощью =scp=, как предлагается на сайте, или при помощи плагина =lein-clojars=);
 - если вы разрабатываете программу для конечного пользователя, то вы упаковываете код в
   архив с помощью =lein jar= -- только ваш код, без зависимостей, или с помощью команды
   =lein uberjar= создаете архив с вашим кодом и всеми зависимостями -- такой архив намного
   проще распространять.

Этот процесс достаточно прост и повторяется до полной готовности вашего кода :-)

** Basic Leiningen's commands

Список команд, которые могут быть выполнены Leiningen не является фиксированным --
дополнительные плагины могут добавлять новые команды.  В минимальной конфигурации
Leiningen реализует следующие команды, которые запускаются как =lein имя_команды [опции]=:

 =help [имя_команды]= :: показывает справку об использовании Leiningen или по конкретной
  команде (за исключением =repl=) , если ее имя указано в командной строке
 =new имя проекта [опции]= :: создает новый пустой проект;
 =deps= :: копирует все зависимости в каталог =lib/=.  Эта команда должна выполняться после
  каждого изменения зависимостей, чтобы остальные команды имели доступ к правильным
  пакетам;
 =compile= :: выполняет компиляцию кода (AOT, ahead-of-time) в классы Java.  Полученные
  классы помещаются в каталог =classes/=.  Пользователь может управлять тем, какие
  пространства имен будут откомпилированы -- для этого имеется опция =:namespaces=, в
  которой надо указать список пространств имен для которых будет производиться компиляция;
 =test [список пространств имен]= :: выполняет тесты из указанных пространств имен, или все
  тесты, если список пространств имен не указан;
 =jar= :: создает пакет (jar) с кодом проекта;
 =uberjar= :: создает автономный пакет (jar) с кодом проекта и всеми зависимостями.  Это
  позволяет достаточно просто распространять ваши программы. При запуске с помощью команды
  =java -jar ...= точкой входа является пространство имен, указанное в опции =:main= в
  =defproject=;
 =pom= :: создает файл =pom.xml=, содержащий описание проекта.  Этот файл нужен если вы хотите
  использовать ваш пакет в другом проекте;
 =install= :: устанавливает собранный пакет в локальный репозиторий Maven;
 =clean= :: удаляет все файлы, созданные в процессе сборки (включая библиотеки из каталога =lib/=);
 =repl= :: запускает цикл ввода команд (REPL) с правильно выставленными путями поиска
  библиотек (classpath) -- в него включаются библиотеки из каталога =lib/=, а также каталоги
  =src/= и =classes/=.  При запуске =lein=[2] автоматически определяет наличие библиотеки jline,
  так что вам становится доступна история введенных команд.

** Additional commands

Дополнительные команды реализуются [[#plugin][плагинами]], расширяющими возможности Leiningen.
Существует некоторое количество популярных плагинов доступных для Leiningen.  Сюда можно
отнести и плагины для запуска серверов Swank и Nailgun, которые реализуют интерактивную
работу из привычной среды Emacs или Vim.  При этом происходит автоматическое подключение
всех указанных зависимостей, так что вы работаете в том же окружении, как и ваша
программа.

Для работы с сервером Swank вам необходимо указать в модуль [[http://clojars.org/leiningen/lein-swank][lein-swank]][3] в списке
зависимостей используемых при разработке (=:dev-dependencies=)[4].  После этого вам станет
доступна команда =lein swank=, выполнив которую на порту 4005 будет запущен сервер Swank, к
которому вы можете подключиться используя команду Emacs =slime-connect=.  Если же вы
пользователь Vim, то вам необходимо указать в зависимостях модуль [[http://clojars.org/lein-nailgun][lein-nailgun]], о работе с
которым вы можете прочитать на странице проекта [[http://kotka.de/projects/clojure/vimclojure.html][vimclojure]].

#plugin
* Extending Leiningen's functionality

Leiningen является расширяемой системой. В случае необходимости вы можете реализовывать
свои команды -- для этого необходимо создать проект, определяющий пространство имен
=leiningen.имя_команды= и содержащий реализацию в виде функции =имя_команды=, принимающей
описание проекта в качестве аргумента.  Подробнее про написание плагинов вы можете
прочитать в [[http://nakkaya.com/2010/02/25/writing-leiningen-plugins-101/][следующем постинге]].  Одним из примеров расширения функциональности Leiningen
является плагин =lein-swank=, который реализует поддержку сервера Swank, и
[[http://github.com/technomancy/leiningen/tree/master/lein-swank/][находится прямо в репозитории]] Leiningen.

В [[http://clojars.org/][репозитории Clojars]] имеется достаточное количество плагинов, которые были написаны для
расширения базовой функциональности Leiningen -- автоматической заливки кода в репозиторий
Clojars, сборки кода написанного на Java, и т.д.  Обычно их имя начинается со слова =lein-=,
которое вы можете использовать [[http://clojars.org/search?q=lein-][в поиске]].  Для использования этих плагинов вы должны
указать их в качестве зависимостей, используемых при разработке (опция =:dev-dependencies=).

* Conclusion

Я очень надеюсь, что данный рассказ поможет вам в работе с Leiningen при разработке на
Clojure.  Если у вас имеются вопросы, то вы можете оставить комментарии на сайте или
написать мне по [[mailto:alexott@gmail.com][электронной почте]] -- я постараюсь на них ответить.


Footnotes: 
[1] стоит также отметить, что существует проект [[http://polyglot.sonatype.org/][Polyglot Maven]], целью которого является
    предоставление возможностей описания конфигураций Maven на разных языках -- Clojure,
    Scala, Groovy и др.

[2] в отличии от других команд =repl= реализована напрямую в скрипте =lein=, а не написана на
    Clojure

[3] пример подключения =lein-swank= вы можете увидеть в нашем тестовом примере.

[4] и не забудьте выполнить команду =lein deps= после добавления этой зависимости!

;  LocalWords:  Leiningen  TODO Maven Vim Leiningen's Clojure plugins plugin
;  LocalWords:  swank Emacs Nailgun lein-swank Clojars repl lein Clojure's clj
;  LocalWords:  compile test install deps nailgun polyglot-maven Groovy Maven's
;  LocalWords:  defproject namespace
